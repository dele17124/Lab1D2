/*
 * File:   LAB1.c
 * Author: Luis De Leon
 *Lab 1: Juego de carreras
 * Created on January 27, 2020, 11:08 AM
 */
/*******************************************************************************
  * PALABRA DE CONFIGURACION*
  *****************************************************************************/

// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>

/*******************************************************************************
 DECLARACION DE VARIABLES Y PROTOCOLOS
 ******************************************************************************/
void puertos(void);
#define _XTAL_FREQ 4000000 //define frecuencia para pic y la conoce el programa
char jugar; //defino variable que habilita el juego
char ban1;//defino variable antirebote para player 1
char ban2;//defino variable antirebote para player 2
/*******************************************************************************
 PROGRAMA PRINCIPAL
 ******************************************************************************/
void main(void) {
    PORTA = 1; //LIMPIO PUERTO A
    PORTB = 1; //LIMPIO PUERTO B
    PORTC = 0; //LIMPIO PUERTO C (DISPLAY)
    ban1 = 0;
    ban2 = 0;//limpio las banderas de antirrebote
    PORTDbits.RD0 = 0;
    PORTDbits.RD1 = 0;
    PORTDbits.RD2 = 0;//apago el semaforo
    PORTDbits.RD3 = 0;
    PORTDbits.RD4 = 0;//APAGO LEDS DE GANADOR
    jugar = 0;//limpio bandera de juego
    
    puertos();//llamo a funcion puertos
    while(1){//COMIENZA LOOP DE JUEGO/
        if(PORTEbits.RE0 == 1){//si apacho boton de inicio
            PORTC = 0b00110000;//3 en display
            PORTDbits.RD0 = 1;//luz roja
            __delay_ms(1000);//muestra por 1 seg
            PORTC = 0b00100100;//2 en display
            PORTDbits.RD1 = 1;
            PORTDbits.RD0 = 0;//luz amarilla
            __delay_ms(1000);//muestra por 1 seg
            PORTC = 0b01111001;//1 en display
            PORTDbits.RD2 = 1;
            PORTDbits.RD1 = 0;//luz verde
            __delay_ms(1000);//muestra por 1 seg
            PORTC = 0b00000000;//0 en display
            PORTDbits.RD2 = 0;//apaga semafoto
            jugar = 1;//aumento variable de control de juego
            
            //inicia competencia
            while(jugar == 1){
                PORTDbits.RD3 = 0;
                PORTDbits.RD4 = 0;//apago leds de ganador
                if(PORTEbits.RE1 == 1 && ban1 == 0){//si apacho boton 1 y bandera 1 esta apagada
                    __delay_ms(100);
                    //codigo para jugador 1
                    PORTA = PORTA << 1; //corro el bit de porta
                    ban1 = 1;//enciendo bandera antirebote
                    __delay_ms(100);
                }
                if(PORTEbits.RE1 == 0){//si suelto el boton 1
                    //codigo para jugador 1
                    ban1 = 0;//apago la bandera antirebote
                }
                if(PORTEbits.RE2 == 1 &&  ban2 == 0){//si apacho boton 2 y ban2 esta apagada
                    __delay_ms(100);
                    //codigo para jugador 2
                    PORTB = PORTB << 1;//corro el bit de portb
                    ban2 = 1;//enciendo bandera antirebote
                    __delay_ms(100);
                }
                if(PORTEbits.RE2 == 0){//si suelto el boton 2
                    //codigo para jugador 1
                    ban2 = 0;//apago la bandera antirebote
                }
                if(PORTAbits.RA7 || PORTBbits.RB7 == 1){//si alguno de los ultimos bits esta encendido
                    if(PORTAbits.RA7 == 1){//reviso que sea en porta
                        PORTDbits.RD3 = 1;//enciendo led ganador 2
                        PORTC = 0b00100100;//2 en display
                        jugar = 0;//apago la bandera de juego
                        __delay_ms(1000);//muestra por 1 seg
                    }
                    if(PORTBbits.RB7 == 1){//reviso que sea en portb
                        PORTDbits.RD4 = 1;//enciendo led ganador 1
                        PORTC = 0b01111001;//1 en display
                        jugar = 0;//apago bandera de juego
                        __delay_ms(1000);//muestra por 1 seg
                    }
                }
            }
            PORTA = 1; //LIMPIO PUERTO A
            PORTB = 1; //LIMPIO PUERTO B
            PORTC = 0; //LIMPIO PUERTO C (DISPLAY)
            PORTDbits.RD4 = 0;
            PORTDbits.RD5 = 0;
            PORTDbits.RD6 = 0;//apago el semaforo
            PORTEbits.RE1 = 0;
            PORTEbits.RE2 = 0;//APAGO LEDS DE GANADOR
        }
    }
    return;
}

/*******************************************************************************
 FUNCIONES DEL PROGRAMA
 ******************************************************************************/
void puertos(void){ //funcion de config de puertos
    ANSEL = 0;
    ANSELH = 0;//VUELVO LOS PUERTOS DIGITALES
    TRISA = 0b00000000;//PUERTO A ES SALIDA
    TRISB = 0b00000000;//PUERTO B ES SALIDA
    TRISC = 0b00000000;//PUERTO C ES SALIDA
    TRISD = 0b00000000;//PUERTO D es salida
    TRISE = 0b0111;//PUERTO E combina entradas y SALIDAs
}
